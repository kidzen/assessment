// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./../src/lib/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator next_crud {
  provider = "npx prisma-next-crud-generator"
}

generator seeder {
  provider = "prisma-generator-fake-data"
  output   = "faker/seeder.ts"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../docs/ERD.md"
  title    = "Inventory System"
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         UserHasRole[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  email   String   @id
  token   String   @unique
  expires DateTime
}

model Role {
  id          String              @id @default(cuid())
  name        String
  permissions RoleHasPermission[]
  users       UserHasRole[]
}

model Permission {
  id      String              @id @default(cuid())
  action  String
  subject String
  roles   RoleHasPermission[]
}

model RoleHasPermission {
  id            String     @id @default(cuid())
  role_id       String
  permission_id String
  role          Role       @relation(fields: [role_id], references: [id])
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
}

model UserHasRole {
  id      String @id @default(cuid())
  role_id String
  user_id String

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([role_id, user_id])
}

model Product {
  id       String  @id @default(cuid())
  ///FAKE:faker.commerce.product()
  name     String
  image_id String?
  ///FAKE:faker.company.name()
  supplier String

  image Upload? @relation(fields: [image_id], references: [id], onDelete: Cascade)
}

model Upload {
  id        String    @id @default(cuid())
  path      String
  type      String?
  mime_type String?
  file_size Float?
  Product   Product[]
}
